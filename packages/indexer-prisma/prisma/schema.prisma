generator client {
  provider      = "prisma-client-js"
  output        = ".prisma/client"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("INDEXER_DATABASE_URL")
}

model token_deploy {
  transaction_hash  String    @id
  network           String?
  block_hash        String?
  block_number      BigInt?
  block_timestamp   DateTime? @db.Timestamp(6)
  memecoin_address  String?   @unique
  owner_address     String?
  name              String?
  symbol            String?
  initial_supply    String?
  total_supply      String?
  cursor            BigInt?   @map("_cursor")
  time_stamp        DateTime? @db.Timestamp(6)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  is_launched       Boolean?
  description       String?
  ipfs_hash         String?
  ipfs_metadata_url String?
  nostr_id          String?
  url               String?
  github            String?
  image_url         String?
  metadata          Json?
  nostr_event_id    String?
  telegram          String?
  twitter           String?
  website           String?
  token_launch token_launch?
  token_metadata token_metadata? @relation("TokenMetadataToDeploy")
}

model token_launch {
  transaction_hash        String    @id
  network                 String?
  block_hash              String?
  owner_address           String?
  block_number            BigInt?
  block_timestamp         DateTime? @db.Timestamp(6)
  memecoin_address        String?   @unique
  quote_token             String?
  exchange_name           String?
  total_supply            String?
  threshold_liquidity     String?
  current_supply          String?
  liquidity_raised        String?
  is_liquidity_added      Boolean?
  total_token_holded      String?
  price                   String?
  bonding_type            String?
  cursor                  BigInt?   @map("_cursor")
  time_stamp              DateTime? @db.Timestamp(6)
  created_at              DateTime? @default(now()) @db.Timestamp(6)
  initial_pool_supply_dex String?
  market_cap              String?
  description             String?
  github                  String?
  image_url               String?
  ipfs_hash               String?
  ipfs_metadata_url       String?
  metadata                Json?
  nostr_event_id          String?
  nostr_id                String?
  telegram                String?
  twitter                 String?
  url                     String?
  website                 String?
  name                    String?
  symbol                  String?
  token_deploy_tx_hash    String? @unique
  token_deploy            token_deploy? @relation(fields: [token_deploy_tx_hash], references: [transaction_hash])
  token_metadata token_metadata? @relation("TokenMetadataToLaunch")
}


model token_metadata {
  transaction_hash String    @id
  network          String?
  block_hash       String?
  block_number     BigInt?
  contract_address String?
  block_timestamp  DateTime? @db.Timestamp(6)
  memecoin_address String?  @unique
  url              String?
  website String?
  twitter String?
  telegram String?
  github String?
  description String?
  nostr_id         String?
  name             String?
  symbol           String?
  cursor           BigInt?   @map("_cursor")
  time_stamp       DateTime? @db.Timestamp(6)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  nostr_event_id   String?

  // One-to-one relation with token_launch
  token_launch    token_launch? @relation("TokenMetadataToLaunch", fields: [memecoin_address], references: [memecoin_address], map: "token_metadata_to_launch_fkey")
  token_deploy    token_deploy? @relation("TokenMetadataToDeploy", fields: [memecoin_address], references: [memecoin_address], map: "token_metadata_to_deploy_fkey")
}

model unrugmeme_deploy {
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String?
  memecoin_address String    @id
  owner_address    String?
  name             String?
  symbol           String?
  initial_supply   String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
}

model unrugmeme_launch {
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String?
  memecoin_address String    @id
  quote_token      String?
  exchange_name    String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
}

model unrugmeme_transfers {
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String?
  transfer_id      String    @id
  from_address     String?
  to_address       String?
  memecoin_address String?
  amount           String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
}

model token_transactions {
  transfer_id      String    @id
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String?
  memecoin_address String?
  owner_address    String?
  last_price       String?
  quote_amount     String?
  coin_received    String?
  initial_supply   String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  total_supply     String?
  current_supply   String?
  liquidity_raised String?
  price            String?
  protocol_fee     String?
  amount           Decimal?  @db.Decimal
  cursor           BigInt?   @map("_cursor")
  transaction_type String
  time_stamp       DateTime? @db.Timestamp(6)
}

model renew_subscription {
  owner_address    String?
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String    @id
  name             String?
  old_name         String?
  paid             String?
  quote_address    String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
  time_stamp       String?
}

model username_changed {
  owner_address    String?
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String    @id
  name             String?
  old_name         String?
  paid             String?
  quote_address    String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
  time_stamp       String?
}

model username_claimed {
  owner_address    String?
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String    @id
  expiry           DateTime? @db.Timestamp(6)
  username         String?
  name             String?
  symbol           String?
  paid             String?
  quote_address    String?
  cursor           BigInt?   @map("_cursor")
  time_stamp       DateTime? @db.Timestamp(6)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
}

model shares_token_user {
  id             String    @id
  owner          String
  token_address  String
  amount_owned   Decimal?  @default(0) @db.Decimal
  is_claimable   Boolean?  @default(false)
  amount_claimed Decimal?  @default(0) @db.Decimal
  created_at     DateTime? @default(now()) @db.Timestamp(6)
}

model tip_deposit {
  network            String?
  block_hash         String?
  block_number       BigInt?
  block_timestamp    DateTime? @db.Timestamp(6)
  transaction_hash   String?
  deposit_id         String    @id
  sender             String
  nostr_recipient    String
  starknet_recipient String?
  token_address      String
  amount             Decimal?  @db.Decimal
  gas_amount         Decimal?  @db.Decimal
  gas_token_address  String?
  is_cancelled       Boolean   @default(false)
  is_claimed         Boolean   @default(false)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @db.Timestamp(6)
}

model tip_transfer {
  network            String?
  block_hash         String?
  block_number       BigInt?
  block_timestamp    DateTime? @db.Timestamp(6)
  transaction_hash   String    @id
  sender             String
  nostr_recipient    String
  starknet_recipient String?
  token_address      String
  amount             Decimal?  @db.Decimal
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @db.Timestamp(6)
}

model IndexerStats {
  id               Int      @id @default(autoincrement())
  lastBlockScraped Int      @default(615556)
  lastTx           String
  lastTimestamp    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model candlesticks {
  token_address    String
  interval_minutes Int
  open             Decimal   @db.Decimal(30, 18)
  close            Decimal   @db.Decimal(30, 18)
  high             Decimal   @db.Decimal(30, 18)
  low              Decimal   @db.Decimal(30, 18)
  timestamp        DateTime
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  id               Int       @id @default(autoincrement())

  @@unique([token_address, interval_minutes, timestamp], name: "token_address_interval_minutes_timestamp")
  @@index([token_address])
  @@index([timestamp])
  @@index([interval_minutes])
}


model overall_data {
  transaction_hash             String
  network                      String?
  epoch_index                  String?
  block_hash                   String?
  block_number                 BigInt?
  starknet_address             String?
  block_timestamp              DateTime?   @db.Timestamp(6)
  cursor                       BigInt?     @map("_cursor")
  time_stamp                   DateTime?   @db.Timestamp(6)
  created_at                   DateTime?   @default(now()) @db.Timestamp(6)
  updated_at                   DateTime?   @default(now()) @db.Timestamp(6)
  last_deposit_at              DateTime?   @default(now()) @db.Timestamp(6)
  amount_claimed               Int?        @default(0)
  amount_vote                  Int?        @default(0)
  amount_algo                  Int?        @default(0)
  total_ai_score               Int?        @default(0)
  total_vote_score             Int?        @default(0)
  total_tips                   Int?        @default(0)
  total_to_claimed             Int?        @default(0)
  total_amount_deposit         Int?        @default(0)
  percentage_algo_distribution Int?        @default(50)
  quote_address                String?
  main_token_address           String?
  end_duration                 DateTime?
  start_duration               DateTime?
  epoch_duration               Int?        @default(0)
  contract_address             String      @id
  topic_metadata               Json
  nostr_metadata               Json
  name                         String?
  about                        String?
  main_tag                     String?
  keyword                      String?
  keywords                     String[]
  epochs                       epoch_data?

  @@index([contract_address])
  @@index([epoch_index])
}

model epoch_data {
  transaction_hash             String
  network                      String?
  epoch_index                  String       @id
  total_ai_score               Int?         @default(0)
  total_vote_score             Int?         @default(0)
  total_amount_deposit         Int?         @default(0)
  block_hash                   String?
  block_number                 BigInt?
  starknet_address             String?
  block_timestamp              DateTime?    @db.Timestamp(6)
  cursor                       BigInt?      @map("_cursor")
  time_stamp                   DateTime?    @db.Timestamp(6)
  created_at                   DateTime?    @default(now()) @db.Timestamp(6)
  updated_at                   DateTime?    @default(now()) @db.Timestamp(6)
  last_deposit_at              DateTime?    @default(now()) @db.Timestamp(6)
  amount_claimed               Int?         @default(0)
  amount_algo                  Int?         @default(0)
  amount_vote                  Int?         @default(0)
  end_duration                 DateTime?
  epoch_duration               Int?
  main_token_address           String?
  percentage_algo_distribution Int?
  quote_address                String?
  start_duration               DateTime?
  total_tip                    Int?         @default(0)
  contract_address             String?
  overall_data_state           overall_data @relation(fields: [epoch_index], references: [contract_address])

  @@index([contract_address])
  @@index([epoch_index])
}

model profile_data {
  transaction_hash String?
  network          String?
  block_hash       String?
  block_number     BigInt?
  starknet_address String?
  block_timestamp  DateTime?                @db.Timestamp(6)
  nostr_id         String                   @id
  cursor           BigInt?                  @map("_cursor")
  time_stamp       DateTime?                @db.Timestamp(6)
  created_at       DateTime?                @default(now()) @db.Timestamp(6)
  updated_at       DateTime?                @default(now()) @db.Timestamp(6)
  nostr_event_id   String?
  total_ai_score   Int?                     @default(0)
  total_tip        Int?                     @default(0)
  total_vote_score Int?                     @default(0)
  amount_claimed   Int?                     @default(0)
  is_add_by_admin  Boolean?                 @default(false)
  state_per_epoch  profile_data_per_epoch[]
}

model profile_data_per_epoch {
  id               Int          @id @default(autoincrement())
  nostr_id         String
  epoch_index      Int
  transaction_hash String?
  network          String?
  block_hash       String?
  block_number     BigInt?
  starknet_address String?
  block_timestamp  DateTime?    @db.Timestamp(6)
  cursor           BigInt?      @map("_cursor")
  time_stamp       DateTime?    @db.Timestamp(6)
  created_at       DateTime?    @default(now()) @db.Timestamp(6)
  updated_at       DateTime?    @default(now()) @db.Timestamp(6)
  nostr_event_id   String?
  total_tip        Int?         @default(0)
  total_ai_score   Int?         @default(0)
  total_vote_score Int?         @default(0)
  amount_claimed   Int?         @default(0)
  profile          profile_data @relation(fields: [nostr_id], references: [nostr_id])
}

model BaseBlockchainEvent {
  id               Int       @id @default(autoincrement())
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
  time_stamp       DateTime? @db.Timestamp(6)
  version          Int?      @default(1)
  is_deleted       Boolean?  @default(false)
}

model ContractState {
  id                           Int           @id @default(autoincrement())
  contract_address             String        @unique
  network                      String?
  current_epoch_index          String?
  total_ai_score               Decimal?      @default(0) @db.Decimal(30, 18)
  total_vote_score             Decimal?      @default(0) @db.Decimal(30, 18)
  total_tips                   Decimal?      @default(0) @db.Decimal(30, 18)
  total_amount_deposit         Decimal?      @default(0) @db.Decimal(30, 18)
  total_to_claimed             Decimal?      @default(0) @db.Decimal(30, 18)
  percentage_algo_distribution Int?          @default(50)
  quote_address                String?
  main_token_address           String?
  current_epoch_duration       Int?          @default(0)
  current_epoch_start          DateTime?
  current_epoch_end            DateTime?
  created_at                   DateTime      @default(now())
  updated_at                   DateTime      @updatedAt
  about                        String?
  keyword                      String?
  keywords                     String[]
  main_tag                     String?
  name                         String?
  nostr_metadata               Json?
  topic_metadata               Json?
  event_id_nip_29              String?
  event_id_nip_72              String?
  epochs                       EpochState[]
  user_profiles                UserProfile[] @relation("ContractStateToUserProfile")

  @@index([contract_address])
  @@index([current_epoch_index])
  @@index([main_token_address])
}

model EpochState {
  id                   Int              @id @default(autoincrement())
  epoch_index          String
  contract_address     String
  total_ai_score       Decimal?         @default(0) @db.Decimal(30, 18)
  total_vote_score     Decimal?         @default(0) @db.Decimal(30, 18)
  total_amount_deposit Decimal?         @default(0) @db.Decimal(30, 18)
  total_tip            Decimal?         @default(0) @db.Decimal(30, 18)
  amount_claimed       Decimal?         @default(0) @db.Decimal(30, 18)
  amount_vote          Decimal?         @default(0) @db.Decimal(30, 18)
  amount_algo          Decimal?         @default(0) @db.Decimal(30, 18)
  epoch_duration       Int?
  start_time           DateTime?
  end_time             DateTime?
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  contract             ContractState    @relation(fields: [contract_address], references: [contract_address])
  user_epoch_states    UserEpochState[]

  @@unique([epoch_index, contract_address])
  @@index([epoch_index])
  @@index([contract_address])
  @@index([start_time])
  @@index([end_time])
}

model UserProfile {
  id               Int              @id @default(autoincrement())
  nostr_id         String           @unique
  starknet_address String?
  total_ai_score   Decimal?         @default(0) @db.Decimal(30, 18)
  total_tip        Decimal?         @default(0) @db.Decimal(30, 18)
  total_vote_score Decimal?         @default(0) @db.Decimal(30, 18)
  amount_claimed   Decimal?         @default(0) @db.Decimal(30, 18)
  is_add_by_admin  Boolean?         @default(false)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  epoch_states     UserEpochState[]
  contract_states  ContractState[]  @relation("ContractStateToUserProfile")

  @@index([nostr_id])
  @@index([starknet_address])
}

model UserEpochState {
  id               Int         @id @default(autoincrement())
  nostr_id         String
  epoch_index      String
  contract_address String
  total_tip        Decimal?    @default(0) @db.Decimal(30, 18)
  total_ai_score   Decimal?    @default(0) @db.Decimal(30, 18)
  total_vote_score Decimal?    @default(0) @db.Decimal(30, 18)
  amount_claimed   Decimal?    @default(0) @db.Decimal(30, 18)
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  epoch            EpochState  @relation(fields: [epoch_index, contract_address], references: [epoch_index, contract_address])
  user             UserProfile @relation(fields: [nostr_id], references: [nostr_id])

  @@unique([nostr_id, epoch_index, contract_address])
  @@index([nostr_id])
  @@index([epoch_index])
  @@index([contract_address])
}
