generator client {
  provider      = "prisma-client-js"
  output        = ".prisma/client"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("INDEXER_DATABASE_URL")
}

model token_deploy {
  transaction_hash String    @id
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  memecoin_address String?
  owner_address    String?
  name             String?
  symbol           String?
  initial_supply   String?
  total_supply     String?
  cursor           BigInt?   @map("_cursor")
  time_stamp       DateTime? @db.Timestamp(6)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  is_launched Boolean?
}

model token_launch {
  transaction_hash    String    @id
  network             String?
  block_hash          String?
  owner_address       String?
  block_number        BigInt?
  block_timestamp     DateTime? @db.Timestamp(6)
  memecoin_address    String?
  quote_token         String?
  exchange_name       String?
  total_supply        String?
  threshold_liquidity String?
  current_supply      String?
  liquidity_raised    String?
  is_liquidity_added  Boolean?
  total_token_holded  String?
  price               String?
  bonding_type        String?
  cursor              BigInt?   @map("_cursor")
  time_stamp          DateTime? @db.Timestamp(6)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  initial_pool_supply_dex String?
}

model unrugmeme_deploy {
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String?
  memecoin_address String    @id
  owner_address    String?
  name             String?
  symbol           String?
  initial_supply   String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
}

model unrugmeme_launch {
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String?
  memecoin_address String    @id
  quote_token      String?
  exchange_name    String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
}

model unrugmeme_transfers {
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String?
  transfer_id      String    @id
  from_address     String?
  to_address       String?
  memecoin_address String?
  amount           String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
}

model token_transactions {
  transfer_id      String    @id
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String?
  memecoin_address String?
  owner_address    String?
  last_price       String?
  quote_amount     String?
  coin_received    String?
  initial_supply   String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  total_supply     String?
  current_supply   String?
  liquidity_raised String?
  price            String?
  protocol_fee     String?
  amount           Decimal?  @db.Decimal
  cursor           BigInt?   @map("_cursor")
  transaction_type String
  time_stamp       DateTime? @db.Timestamp(6)
}

model renew_subscription {
  owner_address    String?
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String    @id
  name             String?
  old_name         String?
  paid             String?
  quote_address    String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
  time_stamp       String?
}

model username_changed {
  owner_address    String?
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String    @id
  name             String?
  old_name         String?
  paid             String?
  quote_address    String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  cursor           BigInt?   @map("_cursor")
  time_stamp       String?
}

model username_claimed {
  owner_address    String?
  network          String?
  block_hash       String?
  block_number     BigInt?
  block_timestamp  DateTime? @db.Timestamp(6)
  transaction_hash String    @id
  expiry           DateTime? @db.Timestamp(6)
  username         String?
  name             String?
  symbol           String?
  paid             String?
  quote_address    String?
  cursor           BigInt?   @map("_cursor")
  time_stamp       DateTime? @db.Timestamp(6)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
}

model shares_token_user {
  id             String    @id
  owner          String
  token_address  String
  amount_owned   Decimal?  @default(0) @db.Decimal
  is_claimable   Boolean?  @default(false)
  amount_claimed Decimal?  @default(0) @db.Decimal
  created_at     DateTime? @default(now()) @db.Timestamp(6)
}

model tip_deposit {
  network            String?
  block_hash         String?
  block_number       BigInt?
  block_timestamp    DateTime? @db.Timestamp(6)
  transaction_hash   String?
  deposit_id         String    @id
  sender             String
  nostr_recipient    String
  starknet_recipient String?
  token_address      String
  amount             Decimal?  @db.Decimal
  gas_amount         Decimal?  @db.Decimal
  gas_token_address  String?
  is_cancelled       Boolean   @default(false)
  is_claimed         Boolean   @default(false)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @db.Timestamp(6)
}

model tip_transfer {
  network            String?
  block_hash         String?
  block_number       BigInt?
  block_timestamp    DateTime? @db.Timestamp(6)
  transaction_hash   String    @id
  sender             String
  nostr_recipient    String
  starknet_recipient String?
  token_address      String
  amount             Decimal?  @db.Decimal
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @db.Timestamp(6)
}

model IndexerStats {
  id        Int      @id @default(autoincrement())
  lastBlockScraped Int
  lastTx          String
  lastTimestamp   DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model candlesticks {
  id              Int       @id @default(autoincrement())
  token_address   String    
  interval_minutes Int      
  open            Decimal   @db.Decimal(30, 18)
  close           Decimal   @db.Decimal(30, 18) 
  high            Decimal   @db.Decimal(30, 18) 
  low             Decimal   @db.Decimal(30, 18)
  timestamp       DateTime  
  created_at      DateTime? @default(now()) @db.Timestamp(6) 

  @@index([token_address])
  @@index([timestamp])
  @@index([interval_minutes])
}